from Source.Core.Functions import AccessAlert, SendKlingOptions, SendPostWithImage, SendPostWithVideo
from Source.Core.Kling import KlingAdapter, KlingOptions
from Source.Core.ImageGenerator import ImageGenerator
from Source.UI import InlineKeyboards
from Source.Core.Queue import Queue

from dublib.Methods.Filesystem import MakeRootDirectories, RemoveDirectoryContent
from dublib.TelebotUtils import TeleCache, TeleMaster, UsersManager
from dublib.Methods.System import CheckPythonMinimalVersion, Clear
from dublib.Engine.Configurator import Config

from time import sleep
import os

from telebot import types
import telebot

#==========================================================================================#
# >>>>> –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ö–†–ò–ü–¢–ê <<<<< #
#==========================================================================================#

Clear()
CheckPythonMinimalVersion(3, 10)
MakeRootDirectories(("Data/Buffer", "Data/Users", "Temp"))

Settings = Config("Settings.json")
Settings.load()

if Settings["proxy"]:
	os.environ["HTTP_PROXY"] = Settings["proxy"]
	os.environ["HTTPS_PROXY"] = Settings["proxy"]

Bot = telebot.TeleBot(Settings["bot_token"])
Master = TeleMaster(Bot)

UsersManagerObject = UsersManager("Data/Users")
Cacher = TeleCache()
Cacher.set_bot(Bot)

GeneratorSDXL = ImageGenerator(Settings["sdxl_flash"])
Kling = KlingAdapter(Settings)
QueueObject = Queue(Bot, GeneratorSDXL, Kling)

#==========================================================================================#
# >>>>> –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î <<<<< #
#==========================================================================================#

@Bot.message_handler(commands = ["about"])
def Command(Message: types.Message):
	User = UsersManagerObject.auth(Message.from_user)

	if User.has_permissions("admin"):
		Bot.send_message(
			chat_id = Message.chat.id,
			text = "<b>PostArtistBot</b> —è–≤–ª—è–µ—Ç—Å—è Open Source –ø—Ä–æ–µ–∫—Ç–æ–º –ø–æ–¥ –ª–∏—Ü–µ–Ω–∑–∏–µ–π Apache 2.0 –∑–∞ –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ–º <a href=\"https://github.com/DUB1401\">@DUB1401</a> –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª–∏ Stable Diffusion Flash –∏ Kling AI –≤ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π –∏ –≤–∏–¥–µ–æ –∫ –ø–æ—Å—Ç–∞–º. –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ <a href=\"https://github.com/DUB1401/PostArtistBot\">—ç—Ç–æ–º</a> —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.",
			parse_mode = "HTML",
			disable_web_page_preview = True
		)

	else: AccessAlert(Message.chat.id, Bot)

@Bot.message_handler(commands = ["admins"])
def Command(Message: types.Message):
	User = UsersManagerObject.auth(Message.from_user)
	
	if User.has_permissions("admin"):
		Admins = UsersManagerObject.get_users(include_permissions = "base_access")

		if len(Admins) > 0:
			for Admin in Admins:
				Keyboard = types.InlineKeyboardMarkup()
				Button = types.InlineKeyboardButton(text = "–£–¥–∞–ª–∏—Ç—å", callback_data = f"remove_{Admin.id}")
				Keyboard.add(Button)

				Text = [
					 f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href=\"https://t.me/{Admin.username}\">{Admin.username}</a>",
					 f"<b>ID:</b> {Admin.id}"
				]

				if Admin.has_permissions("admin"): Text.append("\n<i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</i>")

				Bot.send_message(
					chat_id = Message.chat.id,
					text = "\n".join(Text),
					reply_markup = Keyboard if not Admin.has_permissions("admin") else None,
					parse_mode = "HTML",
					disable_web_page_preview = True
				)
				sleep(0.5)

		else:
			Bot.send_message(
				chat_id = Message.chat.id,
				text = "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞."
			)

	else: AccessAlert(Message.chat.id, Bot)

@Bot.message_handler(commands = ["balance"])
def Command(Message: types.Message):
	User = UsersManagerObject.auth(Message.from_user)

	if User.has_permissions("admin"):
		if Kling.is_enabled:
			Text = (
				f"–î–ª—è <b>Kling AI</b> –º–æ–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ: <b>{Kling.coins_count}</b> üî•",
				f"<i>–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω, –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–µ–Ω—å—à–µ <b>{Kling.min_coins}</b> –º–æ–Ω–µ—Ç.</i>"
			)
			Bot.send_message(
				chat_id = Message.chat.id,
				text = "\n\n".join(Text),
				parse_mode = "HTML",
				reply_markup = InlineKeyboards.close()
			)

		else:
			Bot.send_message(
				chat_id = Message.chat.id,
				text = "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç. <b>Kling AI</b> –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.",
				parse_mode = "HTML",
				reply_markup = InlineKeyboards.close()
			)

	else: AccessAlert(Message.chat.id, Bot)

@Bot.message_handler(commands = ["kling"])
def Command(Message: types.Message):
	User = UsersManagerObject.auth(Message.from_user)

	if User.has_permissions("admin"):
		if Kling.is_enabled:
			Bot.send_message(
				chat_id = Message.chat.id,
				text = f"<b>Kling AI</b> –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ.\n\n–ú–æ–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ: {Kling.coins_count} üî•",
				parse_mode = "HTML"
			)

		else:
			Text = (
				"–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n",
				"<b>–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?</b>\n",
				"1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ –≤–∞—à –±—Ä–∞—É–∑–µ—Ä –¥–∞–Ω–Ω–æ–µ <a href=\"https://chromewebstore.google.com/detail/cookie-editor/hlkenndednhfkekhgcdicdfddnkalmdm\">—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ</a>.",
				"2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ <a href=\"https://klingai.com/\">—Å–∞–π—Ç</a> –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.",
				f"3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã <b>{Kling.min_coins}</b> –º–æ–Ω–µ—Ç.",
				"4. –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –≤—Å–ø–ª—ã–≤—à–µ–≥–æ –æ–∫–Ω–∞ —Å–ø—Ä–∞–≤–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>Export</b>.",
				"5. –í—ã–±–µ—Ä–∏—Ç–µ <b>Header String</b>.",
				"6. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–µ–∫—Å—Ç."
			)

			Bot.send_message(
				chat_id = Message.chat.id,
				text = "\n".join(Text),
				parse_mode = "HTML",
				disable_web_page_preview = True
			)

			User.set_expected_type("kling_cookies")

	else: AccessAlert(Message.chat.id, Bot)

@Bot.message_handler(commands = ["clear"])
def Command(Message: types.Message):
	User = UsersManagerObject.auth(Message.from_user)

	if User.has_permissions("base_access"):
		User.set_property("post", None)
		if os.path.exists(f"Data/Buffer/{Message.from_user.id}"): RemoveDirectoryContent(f"Data/Buffer/{Message.from_user.id}")
		Bot.send_message(
			chat_id = Message.chat.id,
			text = "–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã.",
		)

	else: AccessAlert(Message.chat.id, Bot)

@Bot.message_handler(commands = ["first", "second", "third", "fourth"])
def Command(Message: types.Message):
	User = UsersManagerObject.auth(Message.from_user)

	Indexes = {
		"/first": 0,
		"/second": 1,
		"/third": 2,
		"/fourth": 3
	}
	Index = Indexes[Message.text]

	if User.has_permissions("base_access"):

		if Kling.is_enabled:
			KlingOptions(User).select_image(Index)

			if User.get_property("last_provider") == "sdxl":
				Bot.send_message(
					chat_id = User.id,
					text = f"–ñ–µ–ª–∞–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ <b>Kling AI</b>?\n\n–ú–æ–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ: {Kling.coins_count} üî•",
					parse_mode = "HTML",
					reply_markup = InlineKeyboards.kling_answer()
				)

			else:
				User.set_expected_type("prompt")
				SendKlingOptions(Bot, User)

		elif User.get_property("post"):
			SendPostWithImage(Bot, User, f"Data/Buffer/{Message.from_user.id}/{Index}.jpg")

		else:
			Bot.send_message(
				chat_id = Message.chat.id,
				text = "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏.",
			)

	else: AccessAlert(Message.chat.id, Bot)

@Bot.message_handler(commands = ["password"])
def Command(Message: types.Message):
	User = UsersManagerObject.auth(Message.from_user)

	if User.has_permissions("admin"):

		try:
			Settings["password"] = Message.text.split(" ")[1]

		except IndexError:
			Bot.send_message(
				chat_id = Message.chat.id,
				text = "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ —Å—Ö–µ–º–µ:\n\n/password [STRING*]",
			)
		
		except:
			Bot.send_message(
				chat_id = Message.chat.id,
				text = "–í–æ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
			)

		else:
			Bot.send_message(
				chat_id = Message.chat.id,
				text = "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω."
			)

	else: AccessAlert(Message.chat.id, Bot)

@Bot.message_handler(commands = ["start"])
def Command(Message: types.Message):
	User = UsersManagerObject.auth(Message.from_user)
	User.set_property("post", None)
	User.set_property("description", None)

	if User.has_permissions("base_access"):
		AnimationPath = "Data/start.gif"
		Text = "–Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π, –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, –∏ —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –≤–µ—Å—Ç–∏ –ª–∏—á–Ω—ã–π –±–ª–æ–≥ –∏–ª–∏ –∫–∞–Ω–∞–ª. –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
		
		if os.path.exists(AnimationPath):
			StartAnimation = None

			if not Cacher.has_real_cache(AnimationPath):
				Cacher.set_chat_id(User.id)
				StartAnimation = Cacher.cache_real_file(AnimationPath, types.InputMediaAnimation)
			
			else: 
				StartAnimation = Cacher.get_real_cached_file(AnimationPath, types.InputMediaAnimation)
			
			Bot.send_animation(
				chat_id = Message.chat.id,
				animation = StartAnimation.file_id,
				caption = Text
			)

		else: Bot.send_message(chat_id = Message.chat.id, text = Text)

	else: AccessAlert(Message.chat.id, Bot)

#==========================================================================================#
# >>>>> –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê <<<<< #
#==========================================================================================#

@Bot.message_handler(content_types = ["text"])
def Text(Message: types.Message):
	User = UsersManagerObject.auth(Message.from_user)
	Options = KlingOptions(User)
	IsPassword = False

	if Message.text == Settings["password"]:
		User.add_permissions(["base_access"])
		Bot.send_message(
			chat_id = Message.chat.id,
			text = "–î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω."
		)
		IsPassword = True
		return

	elif Message.text == Settings["admin_password"]:
		User.add_permissions(["admin", "base_access"])
		Bot.send_message(
			chat_id = Message.chat.id,
			text = "–î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω."
		)
		IsPassword = True
		return

	if not IsPassword and not User.has_permissions("base_access"):
		AccessAlert(Message.chat.id, Bot)
		return
	
	if User.expected_type == "prompt":
		Options.set_prompt(Message.text)
		SendKlingOptions(Bot, User)

	elif User.expected_type == "kling_cookies":
		User.reset_expected_type()
		Kling.initialize(Message.text)

		if Kling.is_enabled:
			Bot.send_message(
				chat_id = User.id,
				text = "<b>Kling AI</b> –ø–æ–¥–∫–ª—é—á–µ–Ω.",
				parse_mode = "HTML"
			)
			Settings["kling_ai"]["cookies"] = Message.text
			Settings.save()

		else:
			Bot.send_message(
				chat_id = User.id,
				text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å <b>Kling AI</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /kling –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É.",
				parse_mode = "HTML"
			)

	else:
		Options.drop()
		User.set_property("post", Message.text)
		if os.path.exists(f"Data/Buffer/{User.id}"): RemoveDirectoryContent(f"Data/Buffer/{User.id}")
		Bot.send_message(
			chat_id = User.id,
			text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –≤–ª–æ–∂–µ–Ω–∏—è.",
			reply_markup = InlineKeyboards.select_ratio()
		)
	
#==========================================================================================#
# >>>>> –û–ë–†–ê–ë–û–¢–ö–ê INLINE-–ö–ù–û–ü–û–ö <<<<< #
#==========================================================================================#

@Bot.callback_query_handler(lambda Call: Call.data.startswith("ratio"))
def CallbackQuery_Ratio(Call: types.CallbackQuery):
	User = UsersManagerObject.auth(Call.from_user)
	Bot.delete_message(User.id, Call.message.id)

	if not User.has_permissions("base_access"):
		AccessAlert(User.id, Bot)
		return

	User.set_property("ratio", Call.data.split("_")[-1])
	
	if Kling.is_enabled:
		Bot.send_message(
			chat_id = User.id,
			text = "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏—è.",
			reply_markup = InlineKeyboards.media_types()
		)

	else: QueueObject.append_sdxl(User)

@Bot.callback_query_handler(lambda Call: Call.data.startswith("select_media"))
def CallbackQuery_SelectMedia(Call: types.CallbackQuery):
	User = UsersManagerObject.auth(Call.from_user)
	Master.safely_delete_messages(User.id, Call.message.id)
	Type = Call.data[13:]
	Options = KlingOptions(User)

	if Type == "images":

		if Kling.is_enabled:
			Bot.send_message(
				chat_id = User.id,
				text = "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π.",
				reply_markup = InlineKeyboards.image_generators()
			)

		else: QueueObject.append_sdxl(User)

	elif Type == "video": 
		Options.set_prompt(User.get_property("post"))
		CallbackQuery_KlingYes(Call)

@Bot.callback_query_handler(lambda Call: Call.data.startswith("image_generator"))
def CallbackQuery_ImageGeneratot(Call: types.CallbackQuery):
	User = UsersManagerObject.auth(Call.from_user)
	Bot.delete_message(User.id, Call.message.id)
	Value = Call.data.split("_")[-1]

	if not User.has_permissions("base_access"): 
		AccessAlert(User.id, Bot)
		return
	
	if Value == "kling": QueueObject.append_kling(User)
	else: QueueObject.append_sdxl(User)

@Bot.callback_query_handler(lambda Call: Call.data == "delete_message")
def CallbackQuery_DeleteMessage(Call: types.CallbackQuery):
	User = UsersManagerObject.auth(Call.from_user)
	User.reset_expected_type()
	Master.safely_delete_messages(User.id, Call.message.id)

@Bot.callback_query_handler(lambda Call: Call.data == "retry")
def CallbackQuery_Retry(Call: types.CallbackQuery):
	User = UsersManagerObject.auth(Call.from_user)

	if not User.has_permissions("base_access"):
		AccessAlert(User.id, Bot)
		return
	
	LastOperation = User.get_property("last_operation")
	Master.safely_delete_messages(User.id, Call.message.id)

	if LastOperation == "images":
		LastProvider = User.get_property("last_provider")

		if LastProvider == "sdxl": QueueObject.append_sdxl(User)
		elif LastProvider == "kling": QueueObject.append_kling(User)

	elif LastOperation == "video": CallbackQuery_KlingYes(Call)

#==========================================================================================#
# >>>>> –û–ë–†–ê–ë–û–¢–ö–ê INLINE-–ö–ù–û–ü–û–ö KLING AI <<<<< #
#==========================================================================================#

@Bot.callback_query_handler(lambda Call: Call.data.startswith("kling_options_duration"))
def CallbackQuery_KlingOptionsDuration(Call: types.CallbackQuery):
	User = UsersManagerObject.auth(Call.from_user)

	Value: bool = Call.data.split("_")[-1] == "10"
	KlingOptions(User).set_extend(Value)
	
	Bot.edit_message_reply_markup(
		chat_id = User.id,
		message_id = Call.message.id,
		reply_markup = InlineKeyboards.kling_options(User)
	)

@Bot.callback_query_handler(lambda Call: Call.data.startswith("kling_options_prompt"))
def CallbackQuery_KlingOptionsPrompt(Call: types.CallbackQuery):
	User = UsersManagerObject.auth(Call.from_user)
	User.set_expected_type("prompt")
	Master.safely_delete_messages(Call.message.chat.id, Call.message.id)
	Bot.send_message(User.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞.")

@Bot.callback_query_handler(lambda Call: Call.data.startswith("kling_options_version"))
def CallbackQuery_KlingOptionsVersion(Call: types.CallbackQuery):
	User = UsersManagerObject.auth(Call.from_user)
	Value: str = Call.data.split("_")[-1]
	Value = Value[:1] + "." + Value[1:]
	KlingOptions(User).select_model(Value)
	
	Bot.edit_message_reply_markup(
		chat_id = User.id,
		message_id = Call.message.id,
		reply_markup = InlineKeyboards.kling_options(User)
	)

@Bot.callback_query_handler(lambda Call: Call.data == "kling_generate")
def CallbackQuery_KlingGenerate(Call: types.CallbackQuery):
	User = UsersManagerObject.auth(Call.from_user)
	Master.safely_delete_messages(User.id, Call.message.id)

	if not User.has_permissions("base_access"): 
		AccessAlert(User.id, Bot)
		return
	
	Options = KlingOptions(User)
	User.set_property("last_provider", "kling")
	User.set_property("last_operation", "video")

	Notification = Bot.send_message(User.id, "<i>–í–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. –≠—Ç–æ –∑–∞–π–º—ë—Ç –æ—Ç 2 –¥–æ 10 –º–∏–Ω—É—Ç...</i>", parse_mode = "HTML")

	Link = Kling.generate_video(
		prompt = Options.prompt,
		image_path = Options.image_path,
		extend = Options.extend,
		model = Options.model
	)

	Master.safely_delete_messages(User.id, Notification.id)
	SendPostWithVideo(Bot, User, Link)

	Bot.send_message(
		chat_id = User.id,
		text = "–í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç?",
		reply_markup = InlineKeyboards.retry()
	)

@Bot.callback_query_handler(lambda Call: Call.data == "kling_yes")
def CallbackQuery_KlingYes(Call: types.CallbackQuery):
	User = UsersManagerObject.auth(Call.from_user)
	Master.safely_delete_messages(User.id, Call.message.id)

	if not User.has_permissions("base_access"): 
		AccessAlert(User.id, Bot)
		return
	
	User.set_expected_type("prompt")
	SendKlingOptions(Bot, User)

@Bot.callback_query_handler(lambda Call: Call.data == "kling_no")
def CallbackQuery(Call: types.CallbackQuery):
	User = UsersManagerObject.auth(Call.from_user)
	Bot.delete_message(User.id, Call.message.id)

	if not User.has_permissions("base_access"): 
		AccessAlert(User.id, Bot)
		return
	
	SendPostWithImage(Bot, User, KlingOptions(User).image_path)
	User.set_property("post", None)
	RemoveDirectoryContent(f"Data/Buffer/{User.id}")

@Bot.callback_query_handler(func = lambda Query: True)
def CallbackQuery(Query: types.CallbackQuery):
	User = UsersManagerObject.auth(Query.from_user)
	
	if User.has_permissions("admin"):
		TargetID = Query.data.split("_")[-1]
		TargetUser = UsersManagerObject.get_user(TargetID)
		TargetUser.remove_permissions("base_access")
		Bot.delete_message(Query.message.chat.id, Query.message.message_id)
		Bot.send_message(
			chat_id = Query.message.chat.id,
			text = f"–ü—Ä–∞–≤–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –æ—Ç–æ–∑–≤–∞–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {TargetID}.",
		)

Bot.infinity_polling()